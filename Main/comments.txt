
----------------------------------
Date:6/3/2020
Name: Luis

* Decreased the code required to create the voronoi Regions
    (hopefully error has been minimized)

* A test.py file was created
    - Create a panda dataframe that will store the information 
      collected from the runs

Bugs Note:
* Drone Path Algorithm is duplicating paths.
* Sometimes, optimal charging stations are not found, 
  even when solution was found on other runs
* Sometimes, a tour is not found,
  even when tour was found on other runs

----------------------------------
Date:6/3/2020
Name: Luis

* There is no validation for when the drone is returning back to the CS
  Some type of validation is needed, otherwise, the prime vertices will go out of the
  original triangle.
  
* Continue working on fixing bugs
----------------------------------
Date:6/4/2020
Name: Luis


* The validation used in the code does not work for all cases, and the prime vertices are leaving the triangle.
* There's alot of repeated code in the algorithm and makes it hard to find a solution. Considering rewriting the algorithm to increase readiability
    and find a solution to solve the special cases.

* Continue working on fixing bugs
----------------------------------
Date:6/10/2020
Name: Luis

* Recontruct the Voronoi Method:
    * Previously, I was using some code from online to create the Voronoi Regions. Turns out, it was causing some round off errors.
    Thus, I decided to use the delete the online code and creatively use a box to bound the voronoi regions created by the Voronoi Object from Scipy.
    
* TestBench 
    * More code code was added to ensure Dataframe is collecting the right information
    
* Continue working on fixing bugs    
----------------------------------
Date:6/11/2020
Name: Luis

* Recontruct the Transformation Class
    * triangle.A is no longer the 'always' charging station. 
    The transformation method will return a string with the identity of the CS (which vertex)
    * Side AB is now the longest side of the triangle.
    
* Reconstruct the Drone Path Algorithm as a recursion
    * Create a validation method that ensures the path stays inbound of the Triangle
    * Create a reserve path method
    * Ensure that all distances are measures and added to the total
    
* Continue working on fixing bugs
----------------------------------
Date:6/12/2020
Name: Luis

* Reconstruct the Tour
    * Previously, the Tour method (not the algorithm) was creating an extra Voronoi Region
    which was causing errors in the program. A new way to create the tour has been established.
    * Deleted the Travel.py file, since it was no longer needed.
* Continue working on fixing bugs






